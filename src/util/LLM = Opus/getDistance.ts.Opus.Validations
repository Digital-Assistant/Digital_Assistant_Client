/**
 * calculate distance between selected node and matching node
 * @param1: recorded node
 * @param2: comparing node
 */
export const getDistance = (node1, node2) => {
  // Validate input nodes
  if (!node1 || !node2) {
    throw new Error('Both node1 and node2 are required.');
  }

  // Validate nodePagePosition
  if (!node1.nodePagePosition || !node2.nodePagePosition) {
    throw new Error('nodePagePosition is missing in one or both nodes.');
  }

  // Validate nodePagePosition properties
  if (!node1.nodePagePosition.hasOwnProperty('left') || !node1.nodePagePosition.hasOwnProperty('top') ||
      !node2.nodePagePosition.hasOwnProperty('left') || !node2.nodePagePosition.hasOwnProperty('top')) {
    throw new Error('nodePagePosition.left or nodePagePosition.top is missing in one or both nodes.');
  }

  let dist;
  if (node1.hasOwnProperty('screenSize') && node2.hasOwnProperty('screenSize')) {
    // Validate screenSize
    if (!node1.screenSize || !node2.screenSize) {
      throw new Error('screenSize is missing in one or both nodes.');
    }

    // Validate screenSize.screen
    if (!node1.screenSize.screen || !node2.screenSize.screen) {
      throw new Error('screenSize.screen is missing in one or both nodes.');
    }

    let x, y;
    // if screen size is available then calculating distance based on screen size
    if (node1.screenSize.screen.width && node1.screenSize.screen.height) {
      // Validate screenSize.screen.width and screenSize.screen.height
      if (!node2.screenSize.screen.width || !node2.screenSize.screen.height) {
        throw new Error('screenSize.screen.width or screenSize.screen.height is missing in node2.');
      }

      if (node1.screenSize.screen.width > node2.screenSize.screen.width) {
        x = node1.nodePagePosition.left - (node2.nodePagePosition.left * (node2.screenSize.screen.width / node1.screenSize.screen.width));
        y = node1.nodePagePosition.top - (node2.nodePagePosition.top * (node2.screenSize.screen.height / node1.screenSize.screen.height));
      } else if (node1.screenSize.screen.width < node2.screenSize.screen.width) {
        x = (node1.nodePagePosition.left * (node2.screenSize.screen.width / node1.screenSize.screen.width)) - node2.nodePagePosition.left;
        y = (node1.nodePagePosition.top * (node2.screenSize.screen.height / node1.screenSize.screen.height)) - node2.nodePagePosition.top;
      } else {
        x = node1.nodePagePosition.left - node2.nodePagePosition.left;
        y = node1.nodePagePosition.top - node2.nodePagePosition.top;
      }
    } else {
      x = node1.nodePagePosition.left - node2.nodePagePosition.left;
      y = node1.nodePagePosition.top - node2.nodePagePosition.top;
    }
    dist = Math.abs(Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)));
  } else {
    // Validate nodePosition
    if (!node1.nodePosition || !node2.nodePosition) {
      throw new Error('nodePosition is missing in one or both nodes.');
    }

    // Validate nodePosition properties
    if (!node1.nodePosition.hasOwnProperty('x') || !node1.nodePosition.hasOwnProperty('y') ||
        !node2.nodePosition.hasOwnProperty('x') || !node2.nodePosition.hasOwnProperty('y')) {
      throw new Error('nodePosition.x or nodePosition.y is missing in one or both nodes.');
    }

    const x = node1.nodePosition.x - node2.nodePosition.x;
    const y = node1.nodePosition.y - node2.nodePosition.y;
    dist = Math.abs(Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)));
  }
  return dist;
};
