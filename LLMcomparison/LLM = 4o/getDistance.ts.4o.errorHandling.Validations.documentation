/**
 * Calculate the distance between a selected node and a matching node.
 *
 * This function calculates the Euclidean distance between two nodes. If the nodes have screen size information,
 * the distance is calculated based on their positions relative to the screen size. Otherwise, the distance is
 * calculated based on their absolute positions.
 *
 * @param {Object} node1 - The first node (recorded node).
 * @param {Object} node2 - The second node (comparing node).
 * @returns {number|null} - The distance between the two nodes, or null if an error occurs.
 * @throws {Error} - Throws an error if the required properties are not present in the nodes.
 */
export const getDistance = (node1, node2) => {
  try {
    // Validate that both nodes are provided
    if (!node1 || !node2) {
      throw new Error("Both node1 and node2 must be provided.");
    }

    // Validate that node1 and node2 have the necessary properties
    const validateNode = (node) => {
      if (!node.nodePagePosition || typeof node.nodePagePosition.left !== 'number' || typeof node.nodePagePosition.top !== 'number') {
        throw new Error("Each node must have nodePagePosition with numeric left and top properties.");
      }
      if (node.hasOwnProperty('screenSize')) {
        if (!node.screenSize.screen || typeof node.screenSize.screen.width !== 'number' || typeof node.screenSize.screen.height !== 'number') {
          throw new Error("If screenSize is present, it must have screen with numeric width and height properties.");
        }
      } else if (!node.nodePosition || typeof node.nodePosition.x !== 'number' || typeof node.nodePosition.y !== 'number') {
        throw new Error("Each node must have nodePosition with numeric x and y properties if screenSize is not present.");
      }
    };

    validateNode(node1);
    validateNode(node2);

    let dist;
    if (node1.hasOwnProperty('screenSize') && node2.hasOwnProperty('screenSize')) {
      let x, y;

      if (node1.screenSize.screen.width && node1.screenSize.screen.height) {
        if (node1.screenSize.screen.width > node2.screenSize.screen.width) {
          x = node1.nodePagePosition.left - (node2.nodePagePosition.left * (node2.screenSize.screen.width / node1.screenSize.screen.width));
          y = node1.nodePagePosition.top - (node2.nodePagePosition.top * (node2.screenSize.screen.height / node1.screenSize.screen.height));
        } else if (node1.screenSize.screen.width < node2.screenSize.screen.width) {
          x = (node1.nodePagePosition.left * (node2.screenSize.screen.width / node1.screenSize.screen.width)) - node2.nodePagePosition.left;
          y = (node1.nodePagePosition.top * (node2.screenSize.screen.height / node1.screenSize.screen.height)) - node2.nodePagePosition.top;
        } else {
          x = node1.nodePagePosition.left - node2.nodePagePosition.left;
          y = node1.nodePagePosition.top - node2.nodePagePosition.top;
        }
      } else {
        x = node1.nodePagePosition.left - node2.nodePagePosition.left;
        y = node1.nodePagePosition.top - node2.nodePagePosition.top;
      }
      dist = Math.abs(Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)));
    } else {
      if (!node1.nodePosition || !node2.nodePosition) {
        throw new Error("Both nodes must have nodePosition property.");
      }

      const x = node1.nodePosition.x - node2.nodePosition.x;
      const y = node1.nodePosition.y - node2.nodePosition.y;
      dist = Math.abs(Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)));
    }

    return dist;
  } catch (error) {
    console.error("Error calculating distance:", error.message);
    return null; // or a default value like 0
  }
};
