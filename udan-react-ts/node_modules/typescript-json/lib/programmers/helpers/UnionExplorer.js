"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnionExplorer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var ExpressionFactory_1 = require("../../factories/ExpressionFactory");
var IdentifierFactory_1 = require("../../factories/IdentifierFactory");
var StatementFactory_1 = require("../../factories/StatementFactory");
var UnionPredicator_1 = require("./UnionPredicator");
var UnionExplorer;
(function (UnionExplorer) {
    function object(config, level) {
        if (level === void 0) { level = 0; }
        return function (input, targets, explore, tags) {
            if (targets.length === 1)
                return config.objector.decoder(input, targets[0], explore, tags);
            var expected = "(".concat(targets
                .map(function (t) { return t.name; })
                .join(" | "), ")");
            var specList = UnionPredicator_1.UnionPredicator.object(targets);
            if (specList.length === 0) {
                var condition = config.objector.unionizer(input, targets, __assign(__assign({}, explore), { tracable: false }), tags);
                return config.objector.full
                    ? config.objector.full(condition)(input, expected, explore)
                    : condition;
            }
            var remained = targets.filter(function (t) { return specList.find(function (s) { return s.object === t; }) === undefined; });
            var conditions = specList
                .filter(function (spec) { return spec.property.key.getSoleLiteral() !== null; })
                .map(function (spec) {
                var key = spec.property.key.getSoleLiteral();
                var accessor = IdentifierFactory_1.IdentifierFactory.join(input, key);
                var pred = spec.neighbour
                    ? config.objector.checker(accessor, spec.property.value, __assign(__assign({}, explore), { tracable: false, postfix: IdentifierFactory_1.IdentifierFactory.postfix(key) }), tags)
                    : (config.objector.required || (function (exp) { return exp; }))(ExpressionFactory_1.ExpressionFactory.isRequired(accessor));
                return typescript_1.default.factory.createIfStatement((config.objector.is || (function (exp) { return exp; }))(pred), typescript_1.default.factory.createReturnStatement(config.objector.decoder(input, spec.object, explore, tags)));
            });
            return typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createArrowFunction(undefined, undefined, [], undefined, undefined, typescript_1.default.factory.createBlock(__spreadArray(__spreadArray([], __read(conditions), false), [
                remained.length
                    ? typescript_1.default.factory.createReturnStatement(object(config, level + 1)(input, remained, explore, tags))
                    : config.objector.failure(input, expected, explore),
            ], false), true)), undefined, undefined);
        };
    }
    UnionExplorer.object = object;
    function array(checker, decoder, empty, success, failure) {
        return function (input, targets, explore, tags) {
            if (targets.length === 1)
                return decoder(input, targets[0], explore, tags);
            var top = typescript_1.default.factory.createElementAccessExpression(input, 0);
            var tupleListVariable = StatementFactory_1.StatementFactory.constant("tupleList", typescript_1.default.factory.createArrayLiteralExpression(targets.map(function (meta) {
                return typescript_1.default.factory.createArrayLiteralExpression([
                    typescript_1.default.factory.createArrowFunction(undefined, undefined, [IdentifierFactory_1.IdentifierFactory.parameter("branch")], undefined, undefined, checker(typescript_1.default.factory.createIdentifier("branch"), meta, __assign(__assign({}, explore), { tracable: false, postfix: "\"[0]\"" }), tags)),
                    typescript_1.default.factory.createArrowFunction(undefined, undefined, [IdentifierFactory_1.IdentifierFactory.parameter("branch")], undefined, undefined, decoder(typescript_1.default.factory.createIdentifier("branch"), meta, __assign(__assign({}, explore), { tracable: true }), tags)),
                ]);
            })));
            var filteredVariable = StatementFactory_1.StatementFactory.constant("filtered", typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("tupleList.filter"), undefined, [
                typescript_1.default.factory.createArrowFunction(undefined, undefined, [IdentifierFactory_1.IdentifierFactory.parameter("tuple")], undefined, undefined, typescript_1.default.factory.createStrictEquality(success, typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("tuple[0]"), undefined, [top]))),
            ]));
            var uniqueStatement = typescript_1.default.factory.createIfStatement(typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createNumericLiteral(1), typescript_1.default.factory.createIdentifier("filtered.length")), typescript_1.default.factory.createReturnStatement(typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("filtered[0][1]"), undefined, [input])));
            var forOfStatement = typescript_1.default.factory.createForOfStatement(undefined, typescript_1.default.factory.createVariableDeclarationList([typescript_1.default.factory.createVariableDeclaration("tuple")], typescript_1.default.NodeFlags.Const), typescript_1.default.factory.createIdentifier("filtered"), typescript_1.default.factory.createIfStatement(typescript_1.default.factory.createCallExpression(IdentifierFactory_1.IdentifierFactory.join(input, "every"), undefined, [
                typescript_1.default.factory.createArrowFunction(undefined, undefined, [IdentifierFactory_1.IdentifierFactory.parameter("value")], undefined, undefined, typescript_1.default.factory.createStrictEquality(success, typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("tuple[0]"), undefined, [typescript_1.default.factory.createIdentifier("value")]))),
            ]), typescript_1.default.factory.createReturnStatement(typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("tuple[1]"), undefined, [input]))));
            var unionStatement = typescript_1.default.factory.createIfStatement(typescript_1.default.factory.createLessThan(typescript_1.default.factory.createNumericLiteral(1), typescript_1.default.factory.createIdentifier("filtered.length")), forOfStatement);
            var block = [
                typescript_1.default.factory.createIfStatement(typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createNumericLiteral(0), IdentifierFactory_1.IdentifierFactory.join(input, "length")), typescript_1.default.factory.createReturnStatement(empty)),
                tupleListVariable,
                filteredVariable,
                uniqueStatement,
                unionStatement,
                failure(input, "(".concat(targets
                    .map(function (t) { return "Array<".concat(t.getName(), ">"); })
                    .join(" | "), ")"), explore),
            ];
            return typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createArrowFunction(undefined, undefined, [], undefined, undefined, typescript_1.default.factory.createBlock(block, true)), undefined, undefined);
        };
    }
    UnionExplorer.array = array;
})(UnionExplorer = exports.UnionExplorer || (exports.UnionExplorer = {}));
//# sourceMappingURL=UnionExplorer.js.map