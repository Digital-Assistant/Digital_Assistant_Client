"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionImporter = void 0;
var typescript_1 = __importDefault(require("typescript"));
var IdentifierFactory_1 = require("../../factories/IdentifierFactory");
var StatementFactory_1 = require("../../factories/StatementFactory");
var FunctionImporter = (function () {
    function FunctionImporter() {
        this.used_ = new Set();
        this.sequence_ = 0;
    }
    FunctionImporter.prototype.empty = function () {
        return this.used_.size === 0;
    };
    FunctionImporter.prototype.use = function (name) {
        this.used_.add(name);
        return typescript_1.default.factory.createIdentifier("$" + name);
    };
    FunctionImporter.prototype.declare = function (modulo) {
        return __spreadArray([], __read(this.used_), false).map(function (name) {
            return StatementFactory_1.StatementFactory.constant("$" + name, IdentifierFactory_1.IdentifierFactory.join(modulo, name));
        });
    };
    FunctionImporter.prototype.increment = function () {
        return ++this.sequence_;
    };
    return FunctionImporter;
}());
exports.FunctionImporter = FunctionImporter;
//# sourceMappingURL=FunctionImporeter.js.map