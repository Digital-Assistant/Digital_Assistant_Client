import ts from "typescript";
import { IMetadataTag } from "../../metadata/IMetadataTag";
import { Metadata } from "../../metadata/Metadata";
import { MetadataObject } from "../../metadata/MetadataObject";
import { CheckerProgrammer } from "../CheckerProgrammer";
import { FeatureProgrammer } from "../FeatureProgrammer";
export declare namespace UnionExplorer {
    interface Decoder<T> {
        (input: ts.Expression, target: T, explore: FeatureProgrammer.IExplore, tags: IMetadataTag[]): ts.Expression;
    }
    type ObjectCombiner = Decoder<MetadataObject[]>;
    function object(config: FeatureProgrammer.IConfig, level?: number): (input: ts.Expression, targets: MetadataObject[], explore: FeatureProgrammer.IExplore, tags: IMetadataTag[]) => ts.Expression;
    function array(checker: (input: ts.Expression, metadata: Metadata, explore: FeatureProgrammer.IExplore, tags: IMetadataTag[]) => ts.Expression, decoder: Decoder<Metadata>, empty: ts.Expression, success: ts.Expression, failure: (input: ts.Expression, expected: string, explore: CheckerProgrammer.IExplore) => ts.Statement): (input: ts.Expression, targets: Metadata[], explore: FeatureProgrammer.IExplore, tags: IMetadataTag[]) => ts.Expression;
}
