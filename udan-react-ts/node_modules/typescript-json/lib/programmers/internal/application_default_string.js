"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.application_default_string = void 0;
var application_default_1 = require("./application_default");
var application_default_string = function (meta, attribute) {
    return function (schema) {
        return (0, application_default_1.application_default)(attribute)(function (str) {
            var e_1, _a, e_2, _b;
            var conditions = [];
            if (meta.atomics.find(function (t) { return t === "number" || t === "bigint"; }))
                conditions.push(Number.isNaN(Number(str)));
            if (meta.atomics.find(function (t) { return t === "boolean"; }))
                conditions.push(str !== "true" && str !== "false");
            try {
                for (var _c = __values(meta.constants), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var constant = _d.value;
                    try {
                        for (var _e = (e_2 = void 0, __values(constant.values)), _f = _e.next(); !_f.done; _f = _e.next()) {
                            var value = _f.value;
                            conditions.push(str !== value.toString());
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (schema.minLength !== undefined)
                conditions.push(str.length >= schema.minLength);
            if (schema.maxLength !== undefined)
                conditions.push(str.length <= schema.maxLength);
            if (schema.pattern !== undefined)
                conditions.push(new RegExp(schema.pattern).test(str));
            return conditions.every(function (c) { return c; });
        })(function (str) { return str; });
    };
};
exports.application_default_string = application_default_string;
//# sourceMappingURL=application_default_string.js.map