"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.check_array = void 0;
var typescript_1 = __importDefault(require("typescript"));
var ExpressionFactory_1 = require("../../factories/ExpressionFactory");
var IdentifierFactory_1 = require("../../factories/IdentifierFactory");
var check_length_1 = require("./check_length");
function check_array(input, tagList) {
    var e_1, _a;
    var conditions = [ExpressionFactory_1.ExpressionFactory.isArray(input)];
    try {
        for (var tagList_1 = __values(tagList), tagList_1_1 = tagList_1.next(); !tagList_1_1.done; tagList_1_1 = tagList_1.next()) {
            var tag = tagList_1_1.value;
            if (tag.kind === "minItems")
                conditions.push(typescript_1.default.factory.createLessThanEquals(typescript_1.default.factory.createNumericLiteral(tag.value), IdentifierFactory_1.IdentifierFactory.join(input, "length")));
            else if (tag.kind === "maxItems")
                conditions.push(typescript_1.default.factory.createGreaterThanEquals(typescript_1.default.factory.createNumericLiteral(tag.value), IdentifierFactory_1.IdentifierFactory.join(input, "length")));
            else if (tag.kind === "items")
                (0, check_length_1.check_length)(conditions, IdentifierFactory_1.IdentifierFactory.join(input, "length"), tag);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (tagList_1_1 && !tagList_1_1.done && (_a = tagList_1.return)) _a.call(tagList_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return conditions.reduce(function (x, y) { return typescript_1.default.factory.createLogicalAnd(x, y); });
}
exports.check_array = check_array;
//# sourceMappingURL=check_array.js.map