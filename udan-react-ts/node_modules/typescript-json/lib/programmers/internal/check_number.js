"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.check_number = void 0;
var typescript_1 = __importDefault(require("typescript"));
var OptionPredicator_1 = require("../helpers/OptionPredicator");
function check_number(project, numeric) {
    return function (input, tagList) {
        var e_1, _a;
        var conditions = [
            typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createStringLiteral("number"), typescript_1.default.factory.createTypeOfExpression(input)),
        ];
        var _loop_1 = function (tag) {
            if (tag.kind === "type") {
                conditions.push(typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("parseInt"), undefined, [input]), input));
                if (tag.value === "uint")
                    conditions.push(typescript_1.default.factory.createLessThanEquals(typescript_1.default.factory.createNumericLiteral(0), input));
            }
            else if (tag.kind === "multipleOf")
                conditions.push(typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createNumericLiteral(0), typescript_1.default.factory.createModulo(input, typescript_1.default.factory.createNumericLiteral(tag.value))));
            else if (tag.kind === "step") {
                var modulo = function () {
                    return typescript_1.default.factory.createModulo(input, typescript_1.default.factory.createNumericLiteral(tag.value));
                };
                var minimum = (function () {
                    var e_2, _a;
                    try {
                        for (var tagList_2 = (e_2 = void 0, __values(tagList)), tagList_2_1 = tagList_2.next(); !tagList_2_1.done; tagList_2_1 = tagList_2.next()) {
                            var tag_1 = tagList_2_1.value;
                            if (tag_1.kind === "minimum")
                                return tag_1.value;
                            else if (tag_1.kind === "exclusiveMinimum")
                                return tag_1.value;
                            else if (tag_1.kind === "range" &&
                                tag_1.minimum !== undefined)
                                return tag_1.minimum.value;
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (tagList_2_1 && !tagList_2_1.done && (_a = tagList_2.return)) _a.call(tagList_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    return undefined;
                })();
                conditions.push(typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createNumericLiteral(0), minimum !== undefined
                    ? typescript_1.default.factory.createSubtract(modulo(), typescript_1.default.factory.createNumericLiteral(minimum))
                    : modulo()));
            }
            else if (tag.kind === "range") {
                if (tag.minimum !== undefined)
                    conditions.push((tag.minimum.include
                        ? typescript_1.default.factory.createLessThanEquals
                        : typescript_1.default.factory.createLessThan)(typescript_1.default.factory.createNumericLiteral(tag.minimum.value), input));
                if (tag.maximum !== undefined)
                    conditions.push((tag.maximum.include
                        ? typescript_1.default.factory.createLessThanEquals
                        : typescript_1.default.factory.createLessThan)(input, typescript_1.default.factory.createNumericLiteral(tag.maximum.value)));
            }
            else if (tag.kind === "minimum")
                conditions.push(typescript_1.default.factory.createLessThanEquals(typescript_1.default.factory.createNumericLiteral(tag.value), input));
            else if (tag.kind === "maximum")
                conditions.push(typescript_1.default.factory.createGreaterThanEquals(typescript_1.default.factory.createNumericLiteral(tag.value), input));
            else if (tag.kind === "exclusiveMinimum")
                conditions.push(typescript_1.default.factory.createLessThan(typescript_1.default.factory.createNumericLiteral(tag.value), input));
            else if (tag.kind === "exclusiveMaximum")
                conditions.push(typescript_1.default.factory.createGreaterThan(typescript_1.default.factory.createNumericLiteral(tag.value), input));
        };
        try {
            for (var tagList_1 = __values(tagList), tagList_1_1 = tagList_1.next(); !tagList_1_1.done; tagList_1_1 = tagList_1.next()) {
                var tag = tagList_1_1.value;
                _loop_1(tag);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (tagList_1_1 && !tagList_1_1.done && (_a = tagList_1.return)) _a.call(tagList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var finite = !!tagList.find(function (tag) {
            return tag.kind === "range" &&
                tag.minimum !== undefined &&
                tag.maximum !== undefined;
        }) ||
            (!!tagList.find(function (tag) {
                return tag.kind === "minimum" || tag.kind === "exclusiveMinimum";
            }) &&
                !!tagList.find(function (tag) {
                    return tag.kind === "maximum" ||
                        tag.kind === "exclusiveMaximum";
                })) ||
            !!tagList.find(function (tag) { return tag.kind === "step" || tag.kind === "multipleOf"; });
        var valid = finite || tagList.find(function (tag) { return tag.kind === "type"; }) !== undefined;
        if (numeric &&
            OptionPredicator_1.OptionPredicator.numeric(project.options, "checker") === false) {
            if (finite === false)
                conditions.push(typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("Number.isFinite"), undefined, [input]));
            if (valid === false)
                conditions.push(typescript_1.default.factory.createLogicalNot(typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("Number.isNaN"), undefined, [input])));
        }
        return conditions.length === 1
            ? conditions[0]
            : conditions.reduce(function (x, y) { return typescript_1.default.factory.createLogicalAnd(x, y); });
    };
}
exports.check_number = check_number;
//# sourceMappingURL=check_number.js.map