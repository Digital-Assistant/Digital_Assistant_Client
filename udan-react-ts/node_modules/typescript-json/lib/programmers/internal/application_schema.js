"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.application_schema = void 0;
var Metadata_1 = require("../../metadata/Metadata");
var ArrayUtil_1 = require("../../utils/ArrayUtil");
var application_array_1 = require("./application_array");
var application_boolean_1 = require("./application_boolean");
var application_constant_1 = require("./application_constant");
var application_number_1 = require("./application_number");
var application_object_1 = require("./application_object");
var application_string_1 = require("./application_string");
var application_templates_1 = require("./application_templates");
var application_tuple_1 = require("./application_tuple");
var application_schema = function (options) {
    return function (components) {
        return function (blockNever) {
            return function (meta, attribute) {
                var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e;
                if (meta.any === true)
                    return {};
                else if (meta.nullable && meta.empty())
                    return __assign({ type: "null" }, attribute);
                var union = [];
                if (meta.templates.length) {
                    union.push((0, application_templates_1.application_templates)(meta, attribute));
                }
                try {
                    for (var _f = __values(meta.constants), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var constant = _g.value;
                        if (constant.type === "string" && meta.templates.length)
                            continue;
                        union.push((0, application_constant_1.application_constant)(constant, meta.nullable, attribute));
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                try {
                    for (var _h = __values(meta.atomics), _j = _h.next(); !_j.done; _j = _h.next()) {
                        var type = _j.value;
                        union.push(type === "string"
                            ? (0, application_string_1.application_string)(meta, attribute)
                            : type === "number"
                                ? (0, application_number_1.application_number)(meta.nullable, attribute)
                                : (0, application_boolean_1.application_boolean)(meta.nullable, attribute));
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                try {
                    for (var _k = __values(meta.arrays.values()), _l = _k.next(); !_l.done; _l = _k.next()) {
                        var schema = _l.value;
                        union.push((0, application_array_1.application_array)(options)(components)(schema, meta.nullable, attribute));
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                try {
                    for (var _m = __values(meta.tuples), _o = _m.next(); !_o.done; _o = _m.next()) {
                        var items = _o.value;
                        if (options.purpose === "ajv")
                            union.push((0, application_tuple_1.application_tuple)(options)(components)(items, meta.nullable, attribute));
                        else {
                            var merged = items.reduce(function (x, y) {
                                return merge_metadata(x, y);
                            });
                            union.push((0, application_array_1.application_array)(options)(components)(merged, (merged === null || merged === void 0 ? void 0 : merged.nullable) || false, attribute));
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                try {
                    for (var _p = __values(meta.objects), _q = _p.next(); !_q.done; _q = _p.next()) {
                        var obj = _q.value;
                        var key = obj.name + (meta.nullable ? ".Nullable" : "");
                        (0, application_object_1.application_object)(options)(components)(key, obj, meta.nullable);
                        union.push((options.purpose === "ajv" && obj.recursive
                            ? recursive
                            : reference)("".concat(options.prefix, "/").concat(key), attribute));
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
                if (union.length === 0)
                    return blockNever === true ? null : {};
                else if (union.length === 1)
                    return union[0];
                return __assign({ oneOf: union }, attribute);
            };
        };
    };
};
exports.application_schema = application_schema;
var reference = function ($ref, attribute) { return (__assign({ $ref: $ref }, attribute)); };
var recursive = function ($recursiveRef, attribute) { return (__assign({ $recursiveRef: $recursiveRef }, attribute)); };
function merge_metadata(x, y) {
    var e_6, _a, e_7, _b, e_8, _c;
    var output = Metadata_1.Metadata.create({
        any: x.any || y.any,
        nullable: x.nullable || y.nullable,
        required: x.required && y.required,
        functional: x.functional || y.functional,
        resolved: x.resolved !== null && y.resolved !== null
            ? merge_metadata(x.resolved, y.resolved)
            : x.resolved || y.resolved,
        atomics: __spreadArray([], __read(new Set(__spreadArray(__spreadArray([], __read(x.atomics), false), __read(y.atomics), false))), false),
        constants: __spreadArray([], __read(x.constants), false),
        templates: x.templates.slice(),
        arrays: x.arrays.slice(),
        tuples: x.tuples.slice(),
        objects: x.objects.slice(),
    });
    var _loop_1 = function (constant) {
        var e_9, _k;
        var target = ArrayUtil_1.ArrayUtil.take(output.constants, function (elem) { return elem.type === constant.type; }, function () { return ({
            type: constant.type,
            values: [],
        }); });
        try {
            for (var _l = (e_9 = void 0, __values(constant.values)), _m = _l.next(); !_m.done; _m = _l.next()) {
                var value = _m.value;
                ArrayUtil_1.ArrayUtil.add(target.values, value);
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_m && !_m.done && (_k = _l.return)) _k.call(_l);
            }
            finally { if (e_9) throw e_9.error; }
        }
    };
    try {
        for (var _d = __values(y.constants), _e = _d.next(); !_e.done; _e = _d.next()) {
            var constant = _e.value;
            _loop_1(constant);
        }
    }
    catch (e_6_1) { e_6 = { error: e_6_1 }; }
    finally {
        try {
            if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
        }
        finally { if (e_6) throw e_6.error; }
    }
    try {
        for (var _f = __values(y.arrays), _g = _f.next(); !_g.done; _g = _f.next()) {
            var array = _g.value;
            ArrayUtil_1.ArrayUtil.set(output.arrays, array, function (elem) { return elem.getName(); });
        }
    }
    catch (e_7_1) { e_7 = { error: e_7_1 }; }
    finally {
        try {
            if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
        }
        finally { if (e_7) throw e_7.error; }
    }
    try {
        for (var _h = __values(y.objects), _j = _h.next(); !_j.done; _j = _h.next()) {
            var obj = _j.value;
            ArrayUtil_1.ArrayUtil.set(output.objects, obj, function (elem) { return elem.name; });
        }
    }
    catch (e_8_1) { e_8 = { error: e_8_1 }; }
    finally {
        try {
            if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
        }
        finally { if (e_8) throw e_8.error; }
    }
    return output;
}
//# sourceMappingURL=application_schema.js.map