"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.application_array = void 0;
var application_schema_1 = require("./application_schema");
var application_array = function (options) {
    return function (components) {
        return function (metadata, nullable, attribute) {
            var e_1, _a;
            var output = __assign({ type: "array", items: (0, application_schema_1.application_schema)(options)(components)(false)(metadata, attribute), nullable: nullable }, attribute);
            try {
                for (var _b = __values(attribute["x-tson-metaTags"] || []), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var tag = _c.value;
                    if (tag.kind === "minItems")
                        output.minItems = tag.value;
                    else if (tag.kind === "maxItems")
                        output.maxItems = tag.value;
                    else if (tag.kind === "items") {
                        if (tag.minimum !== undefined)
                            output.minItems =
                                tag.minimum.value +
                                    (tag.minimum.include === true ? 0 : 1);
                        if (tag.maximum !== undefined)
                            output.maxItems =
                                tag.maximum.value -
                                    (tag.maximum.include === true ? 0 : 1);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return output;
        };
    };
};
exports.application_array = application_array;
//# sourceMappingURL=application_array.js.map