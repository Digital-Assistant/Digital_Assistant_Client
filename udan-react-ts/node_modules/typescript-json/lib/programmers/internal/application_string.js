"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.application_string = void 0;
var application_default_string_1 = require("./application_default_string");
var application_string = function (meta, attribute) {
    var e_1, _a;
    var _b, _c;
    var output = __assign({ type: "string", nullable: meta.nullable }, attribute);
    var formatJsdocTag = (_b = attribute["x-tson-jsDocTags"]) === null || _b === void 0 ? void 0 : _b.find(function (tag) { return tag.name === "format"; });
    if ((_c = formatJsdocTag === null || formatJsdocTag === void 0 ? void 0 : formatJsdocTag.text) === null || _c === void 0 ? void 0 : _c.length)
        output.format = formatJsdocTag === null || formatJsdocTag === void 0 ? void 0 : formatJsdocTag.text.map(function (t) { return t.text; }).join(" ");
    try {
        for (var _d = __values(attribute["x-tson-metaTags"] || []), _e = _d.next(); !_e.done; _e = _d.next()) {
            var tag = _e.value;
            if (tag.kind === "minLength")
                output.minLength = tag.value;
            else if (tag.kind === "maxLength")
                output.maxLength = tag.value;
            else if (tag.kind === "length") {
                if (tag.minimum !== undefined)
                    output.minLength =
                        tag.minimum.value + (tag.minimum.include ? 0 : 1);
                if (tag.maximum !== undefined)
                    output.maxLength =
                        tag.maximum.value - (tag.maximum.include ? 0 : 1);
            }
            else if (tag.kind === "format")
                output.format = tag.value;
            else if (tag.kind === "pattern")
                output.pattern = tag.value;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
        }
        finally { if (e_1) throw e_1.error; }
    }
    output.default = (0, application_default_string_1.application_default_string)(meta, attribute)(output);
    return output;
};
exports.application_string = application_string;
//# sourceMappingURL=application_string.js.map