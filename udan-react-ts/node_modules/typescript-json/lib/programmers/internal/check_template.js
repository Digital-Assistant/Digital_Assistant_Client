"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.check_template = void 0;
var typescript_1 = __importDefault(require("typescript"));
var check_string_tags_1 = require("./check_string_tags");
var template_to_pattern_1 = require("./template_to_pattern");
var check_template = function (importer) {
    return function (input, templates, tagList) {
        var conditions = __spreadArray([
            typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createStringLiteral("string"), typescript_1.default.factory.createTypeOfExpression(input))
        ], __read((0, check_string_tags_1.check_string_tags)(importer)(input, tagList)), false);
        var internal = templates.map(function (tpl) {
            return typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createTrue(), typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("RegExp(/".concat((0, template_to_pattern_1.template_to_pattern)(true)(tpl), "/).test")), undefined, [input]));
        });
        conditions.push(internal.length === 1
            ? internal[0]
            : internal.reduce(function (x, y) { return typescript_1.default.factory.createLogicalOr(x, y); }));
        return conditions.reduce(function (x, y) { return typescript_1.default.factory.createLogicalAnd(x, y); });
    };
};
exports.check_template = check_template;
//# sourceMappingURL=check_template.js.map