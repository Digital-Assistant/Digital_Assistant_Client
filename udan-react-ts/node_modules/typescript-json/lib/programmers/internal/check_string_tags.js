"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.check_string_tags = void 0;
var typescript_1 = __importDefault(require("typescript"));
var IdentifierFactory_1 = require("../../factories/IdentifierFactory");
var check_length_1 = require("./check_length");
var check_string_tags = function (importer) {
    return function (input, tagList) {
        var e_1, _a;
        var conditions = [];
        try {
            for (var tagList_1 = __values(tagList), tagList_1_1 = tagList_1.next(); !tagList_1_1.done; tagList_1_1 = tagList_1.next()) {
                var tag = tagList_1_1.value;
                if (tag.kind === "format")
                    conditions.push(typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createTrue(), typescript_1.default.factory.createCallExpression(importer.use("is_".concat(tag.value)), undefined, [input])));
                else if (tag.kind === "pattern")
                    conditions.push(typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createTrue(), typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("RegExp(/".concat(tag.value, "/).test")), undefined, [input])));
                else if (tag.kind === "minLength")
                    conditions.push(typescript_1.default.factory.createLessThanEquals(typescript_1.default.factory.createNumericLiteral(tag.value), IdentifierFactory_1.IdentifierFactory.join(input, "length")));
                else if (tag.kind === "maxLength")
                    conditions.push(typescript_1.default.factory.createGreaterThanEquals(typescript_1.default.factory.createNumericLiteral(tag.value), IdentifierFactory_1.IdentifierFactory.join(input, "length")));
                else if (tag.kind === "length")
                    (0, check_length_1.check_length)(conditions, IdentifierFactory_1.IdentifierFactory.join(input, "length"), tag);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (tagList_1_1 && !tagList_1_1.done && (_a = tagList_1.return)) _a.call(tagList_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return conditions;
    };
};
exports.check_string_tags = check_string_tags;
//# sourceMappingURL=check_string_tags.js.map