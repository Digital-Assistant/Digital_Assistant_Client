"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckerProgrammer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var ExpressionFactory_1 = require("../factories/ExpressionFactory");
var MetadataCollection_1 = require("../factories/MetadataCollection");
var MetadataFactory_1 = require("../factories/MetadataFactory");
var ValueFactory_1 = require("../factories/ValueFactory");
var FeatureProgrammer_1 = require("./FeatureProgrammer");
var OptionPredicator_1 = require("./helpers/OptionPredicator");
var UnionExplorer_1 = require("./helpers/UnionExplorer");
var check_array_1 = require("./internal/check_array");
var check_number_1 = require("./internal/check_number");
var check_string_1 = require("./internal/check_string");
var check_template_1 = require("./internal/check_template");
var decode_union_object_1 = require("./internal/decode_union_object");
var CheckerProgrammer;
(function (CheckerProgrammer) {
    function generate(project, config, importer, addition) {
        return FeatureProgrammer_1.FeatureProgrammer.generate(project, CONFIG(project, config, importer), importer, function () { return (addition ? (addition ? addition() : []) : undefined); });
    }
    CheckerProgrammer.generate = generate;
    CheckerProgrammer.generate_functors = function (project, config, importer) {
        return FeatureProgrammer_1.FeatureProgrammer.generate_functors(CONFIG(project, config, importer), importer);
    };
    CheckerProgrammer.generate_unioners = function (project, config, importer) {
        return FeatureProgrammer_1.FeatureProgrammer.generate_unioners(CONFIG(project, __assign(__assign({}, config), { numeric: false }), importer));
    };
    function CONFIG(project, config, importer) {
        var output = {
            trace: config.trace,
            path: config.path,
            functors: config.functors,
            unioners: config.unioners,
            initializer: function (_a, type) {
                var checker = _a.checker;
                var collection = new MetadataCollection_1.MetadataCollection();
                var meta = MetadataFactory_1.MetadataFactory.generate(checker, collection, type, {
                    resolve: false,
                    constant: true,
                });
                return [collection, meta];
            },
            decoder: decode(project, config, importer),
            objector: {
                checker: decode(project, config, importer),
                decoder: decode_object(config),
                joiner: config.joiner.object,
                unionizer: config.equals
                    ? (0, decode_union_object_1.decode_union_object)(decode_object(config))(function (input, obj, explore) {
                        return decode_object(config)(input, obj, __assign(__assign({}, explore), { tracable: true }));
                    })(config.joiner.is || (function (expr) { return expr; }))(function (value, expected) {
                        return typescript_1.default.factory.createReturnStatement(config.joiner.failure(value, expected));
                    })
                    : function (input, targets, explore) {
                        return config.combiner(explore)("or")(input, targets.map(function (obj) { return ({
                            expression: decode_object(config)(input, obj, explore),
                            combined: true,
                        }); }), "(".concat(targets.map(function (t) { return t.name; }).join(" | "), ")"));
                    },
                failure: function (value, expected) {
                    return typescript_1.default.factory.createReturnStatement(config.joiner.failure(value, expected));
                },
                is: config.joiner.is,
                required: config.joiner.required,
                full: config.joiner.full,
            },
        };
        if (config.numeric === true)
            output.generator = {
                unioners: FeatureProgrammer_1.FeatureProgrammer.generate_unioners(CONFIG(project, __assign(__assign({}, config), { numeric: false }), importer)),
            };
        return output;
    }
    function decode(project, config, importer) {
        return function (input, meta, explore, tags) {
            var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
            if (meta.any)
                return config.success;
            var top = [];
            var binaries = [];
            var add = create_add(binaries)(input);
            var getConstantValue = function (value) {
                return typeof value === "string"
                    ? typescript_1.default.factory.createStringLiteral(value)
                    : typescript_1.default.factory.createIdentifier(value.toString());
            };
            var checkOptional = meta.empty() || meta.isUnionBucket();
            if (checkOptional ||
                meta.nullable)
                (meta.nullable ? add : create_add(top)(input))(meta.nullable, ValueFactory_1.ValueFactory.NULL());
            if (checkOptional || !meta.required)
                (meta.required ? create_add(top)(input) : add)(!meta.required, ValueFactory_1.ValueFactory.UNDEFINED());
            if (meta.functional === true &&
                (OptionPredicator_1.OptionPredicator.functional(project.options) ||
                    meta.size() !== 1))
                add(true, typescript_1.default.factory.createStringLiteral("function"), ValueFactory_1.ValueFactory.TYPEOF(input));
            try {
                for (var _e = __values(meta.constants), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var constant = _f.value;
                    try {
                        for (var _g = (e_2 = void 0, __values(constant.values)), _h = _g.next(); !_h.done; _h = _g.next()) {
                            var val = _h.value;
                            add(true, getConstantValue(val));
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
            try {
                for (var _j = __values(meta.atomics), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var type = _k.value;
                    if (type === "number")
                        binaries.push({
                            expression: (0, check_number_1.check_number)(project, config.numeric)(input, tags),
                            combined: false,
                        });
                    else if (type === "string")
                        binaries.push({
                            expression: (0, check_string_1.check_string)(importer)(input, tags),
                            combined: false,
                        });
                    else
                        add(true, typescript_1.default.factory.createStringLiteral(type), ValueFactory_1.ValueFactory.TYPEOF(input));
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_3) throw e_3.error; }
            }
            if (meta.templates.length)
                binaries.push({
                    expression: (0, check_template_1.check_template)(importer)(input, meta.templates, tags),
                    combined: false,
                });
            if (meta.tuples.length > 0) {
                var inner = [];
                try {
                    for (var _l = __values(meta.tuples), _m = _l.next(); !_m.done; _m = _l.next()) {
                        var tuple = _m.value;
                        inner.push(decode_tuple(project, config, importer)(input, tuple, explore, tags));
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                binaries.push({
                    expression: config.combiner(explore)("and")(input, __spreadArray([
                        {
                            expression: ExpressionFactory_1.ExpressionFactory.isArray(input),
                            combined: false,
                        }
                    ], __read(inner.map(function (expression) { return ({
                        expression: expression,
                        combined: true,
                    }); })), false), meta.getName()),
                    combined: true,
                });
            }
            if (meta.arrays.length > 0)
                binaries.push({
                    expression: config.combiner(explore)("and")(input, [
                        {
                            expression: (0, check_array_1.check_array)(input, tags),
                            combined: false,
                        },
                        {
                            expression: explore_array(project, config, importer)(input, meta.arrays, __assign(__assign({}, explore), { from: "array" }), tags),
                            combined: true,
                        },
                    ], meta.getName()),
                    combined: true,
                });
            if (meta.objects.length > 0)
                binaries.push({
                    expression: config.combiner(explore)("and")(input, [
                        {
                            expression: ExpressionFactory_1.ExpressionFactory.isObject(input, true),
                            combined: false,
                        },
                        {
                            expression: explore_objects(config)(input, meta, __assign(__assign({}, explore), { from: "object" })),
                            combined: true,
                        },
                    ], meta.getName()),
                    combined: true,
                });
            return top.length !== 0
                ? config.combiner(explore)("and")(input, __spreadArray(__spreadArray([], __read(top), false), [
                    {
                        expression: config.combiner(explore)("or")(input, binaries, meta.getName()),
                        combined: true,
                    },
                ], false), meta.getName())
                : config.combiner(explore)("or")(input, binaries, meta.getName());
        };
    }
    CheckerProgrammer.decode = decode;
    function decode_tuple(project, config, importer) {
        return function (input, tuple, explore, tagList) {
            var length = typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createPropertyAccessExpression(input, "length"), typescript_1.default.factory.createNumericLiteral(tuple.length));
            var binaries = tuple.map(function (meta, index) {
                return decode(project, config, importer)(typescript_1.default.factory.createElementAccessExpression(input, index), meta, __assign(__assign({}, explore), { from: "array", postfix: explore.postfix.length
                        ? "".concat(explore.postfix.slice(0, -1), "[").concat(index, "]\"")
                        : "[".concat(index, "]") }), tagList);
            });
            return config.combiner(explore)("and")(input, __spreadArray([
                {
                    expression: length,
                    combined: false,
                }
            ], __read((config.joiner.tuple
                ? [
                    {
                        expression: config.joiner.tuple(binaries),
                        combined: true,
                    },
                ]
                : binaries.map(function (expression) { return ({
                    expression: expression,
                    combined: true,
                }); }))), false), "[".concat(tuple.map(function (t) { return t.getName(); }).join(", "), "]"));
        };
    }
    function decode_array(project, config, importer) {
        return FeatureProgrammer_1.FeatureProgrammer.decode_array({
            trace: config.trace,
            path: config.path,
            decoder: decode(project, config, importer),
        }, importer, config.joiner.array);
    }
    function decode_object(config) {
        var func = FeatureProgrammer_1.FeatureProgrammer.decode_object(config);
        return function (input, obj, explore) {
            obj.validated = true;
            return func(input, obj, explore);
        };
    }
    CheckerProgrammer.decode_object = decode_object;
    var explore_array = function (project, config, importer) {
        return UnionExplorer_1.UnionExplorer.array(decode(project, config, importer), decode_array(project, config, importer), config.success, config.success, function (input, expected, explore) {
            return typescript_1.default.factory.createReturnStatement(config.joiner.failure(input, expected, explore));
        });
    };
    var explore_objects = function (config) {
        var objector = decode_object(config);
        return function (input, meta, explore) {
            if (meta.objects.length === 1)
                return objector(input, meta.objects[0], explore);
            return typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("".concat(config.unioners).concat(meta.union_index)), undefined, FeatureProgrammer_1.FeatureProgrammer.get_object_arguments(config)(explore)(input));
        };
    };
})(CheckerProgrammer = exports.CheckerProgrammer || (exports.CheckerProgrammer = {}));
var create_add = function (binaries) {
    return function (defaultInput) {
        return function (exact, left, right) {
            if (right === void 0) { right = defaultInput; }
            var factory = exact
                ? typescript_1.default.factory.createStrictEquality
                : typescript_1.default.factory.createStrictInequality;
            binaries.push({
                expression: factory(left, right),
                combined: false,
            });
        };
    };
};
//# sourceMappingURL=CheckerProgrammer.js.map