"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidateProgrammer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var IdentifierFactory_1 = require("../factories/IdentifierFactory");
var StatementFactory_1 = require("../factories/StatementFactory");
var ValueFactory_1 = require("../factories/ValueFactory");
var CheckerProgrammer_1 = require("./CheckerProgrammer");
var IsProgrammer_1 = require("./IsProgrammer");
var FunctionImporeter_1 = require("./helpers/FunctionImporeter");
var check_everything_1 = require("./internal/check_everything");
var check_object_1 = require("./internal/check_object");
var ValidateProgrammer;
(function (ValidateProgrammer) {
    ValidateProgrammer.generate = function (project, modulo, equals) {
        if (equals === void 0) { equals = false; }
        return function (type) {
            var importer = new FunctionImporeter_1.FunctionImporter();
            var program = CheckerProgrammer_1.CheckerProgrammer.generate(project, {
                functors: "$vo",
                unioners: "$vu",
                path: true,
                trace: true,
                numeric: !!project.options.numeric,
                equals: equals,
                combiner: combine(equals)(importer),
                joiner: joiner(equals)(importer),
                success: typescript_1.default.factory.createTrue(),
            }, importer)(type);
            return typescript_1.default.factory.createArrowFunction(undefined, undefined, [IdentifierFactory_1.IdentifierFactory.parameter("input")], undefined, undefined, typescript_1.default.factory.createBlock(__spreadArray(__spreadArray([
                StatementFactory_1.StatementFactory.constant("$out", create_output()),
                StatementFactory_1.StatementFactory.constant("$report", typescript_1.default.factory.createCallExpression(IdentifierFactory_1.IdentifierFactory.join(modulo, "report"), [], [typescript_1.default.factory.createIdentifier("$out")]))
            ], __read(importer.declare(modulo)), false), [
                typescript_1.default.factory.createExpressionStatement(typescript_1.default.factory.createCallExpression(program, undefined, [
                    ValueFactory_1.ValueFactory.INPUT(),
                    typescript_1.default.factory.createStringLiteral("$input"),
                    typescript_1.default.factory.createTrue(),
                ])),
                typescript_1.default.factory.createIfStatement(typescript_1.default.factory.createStrictInequality(typescript_1.default.factory.createNumericLiteral(0), typescript_1.default.factory.createIdentifier("$out.errors.length")), typescript_1.default.factory.createExpressionStatement(typescript_1.default.factory.createBinaryExpression(typescript_1.default.factory.createPropertyAccessExpression(typescript_1.default.factory.createIdentifier("$out"), typescript_1.default.factory.createIdentifier("success")), typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.EqualsToken), typescript_1.default.factory.createFalse()))),
                typescript_1.default.factory.createReturnStatement(typescript_1.default.factory.createIdentifier("$out")),
            ], false), true));
        };
    };
})(ValidateProgrammer = exports.ValidateProgrammer || (exports.ValidateProgrammer = {}));
var combine = function (equals) {
    return function (importer) {
        return function (explore) {
            if (explore.tracable === false && explore.from !== "top")
                return IsProgrammer_1.IsProgrammer.CONFIG({
                    object: validate_object(equals)(importer),
                    numeric: true,
                }).combiner(explore);
            var path = explore.postfix
                ? "path + ".concat(explore.postfix)
                : "path";
            return function (logic) { return function (input, binaries, expected) {
                return logic === "and"
                    ? binaries
                        .map(function (binary) {
                        return binary.combined
                            ? binary.expression
                            : typescript_1.default.factory.createLogicalOr(binary.expression, create_report_call(explore.source === "top"
                                ? typescript_1.default.factory.createTrue()
                                : typescript_1.default.factory.createIdentifier("exceptionable"))(typescript_1.default.factory.createIdentifier(path), expected, input));
                    })
                        .reduce(typescript_1.default.factory.createLogicalAnd)
                    : typescript_1.default.factory.createLogicalOr(binaries
                        .map(function (binary) { return binary.expression; })
                        .reduce(typescript_1.default.factory.createLogicalOr), create_report_call(explore.source === "top"
                        ? typescript_1.default.factory.createTrue()
                        : typescript_1.default.factory.createIdentifier("exceptionable"))(typescript_1.default.factory.createIdentifier(path), expected, input));
            }; };
        };
    };
};
var validate_object = function (equals) { return function (importer) {
    return (0, check_object_1.check_object)({
        equals: equals,
        assert: false,
        reduce: typescript_1.default.factory.createLogicalAnd,
        positive: typescript_1.default.factory.createTrue(),
        superfluous: function (value) {
            return create_report_call()(typescript_1.default.factory.createAdd(typescript_1.default.factory.createIdentifier("path"), typescript_1.default.factory.createCallExpression(importer.use("join"), undefined, [typescript_1.default.factory.createIdentifier("key")])), "undefined", value);
        },
        halt: function (expr) {
            return typescript_1.default.factory.createLogicalOr(typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createFalse(), typescript_1.default.factory.createIdentifier("exceptionable")), expr);
        },
    });
}; };
var joiner = function (equals) {
    return function (importer) { return ({
        object: validate_object(equals)(importer),
        array: function (input, arrow) {
            return (0, check_everything_1.check_everything)(typescript_1.default.factory.createCallExpression(IdentifierFactory_1.IdentifierFactory.join(input, "map"), undefined, [arrow]));
        },
        failure: function (value, expected, explore) {
            return create_report_call((explore === null || explore === void 0 ? void 0 : explore.from) === "top"
                ? typescript_1.default.factory.createTrue()
                : typescript_1.default.factory.createIdentifier("exceptionable"))(typescript_1.default.factory.createIdentifier((explore === null || explore === void 0 ? void 0 : explore.postfix) ? "path + ".concat(explore.postfix) : "path"), expected, value);
        },
        tuple: function (binaries) {
            return (0, check_everything_1.check_everything)(typescript_1.default.factory.createArrayLiteralExpression(binaries, true));
        },
    }); };
};
function create_output() {
    return typescript_1.default.factory.createObjectLiteralExpression([
        typescript_1.default.factory.createPropertyAssignment("success", typescript_1.default.factory.createTrue()),
        typescript_1.default.factory.createPropertyAssignment("errors", typescript_1.default.factory.createArrayLiteralExpression([], true)),
    ], true);
}
var create_report_call = function (exceptionable) {
    return function (path, expected, value) {
        return typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("$report"), undefined, [
            exceptionable || typescript_1.default.factory.createIdentifier("exceptionable"),
            typescript_1.default.factory.createObjectLiteralExpression([
                typescript_1.default.factory.createPropertyAssignment("path", path),
                typescript_1.default.factory.createPropertyAssignment("expected", typescript_1.default.factory.createStringLiteral(expected)),
                typescript_1.default.factory.createPropertyAssignment("value", value),
            ], true),
        ]);
    };
};
//# sourceMappingURL=ValidateProgrammer.js.map