"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsProgrammer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var IdentifierFactory_1 = require("../factories/IdentifierFactory");
var ValueFactory_1 = require("../factories/ValueFactory");
var CheckerProgrammer_1 = require("./CheckerProgrammer");
var FunctionImporeter_1 = require("./helpers/FunctionImporeter");
var check_object_1 = require("./internal/check_object");
var IsProgrammer;
(function (IsProgrammer) {
    IsProgrammer.CONFIG = function (options) { return ({
        functors: "$io",
        unioners: "$iu",
        trace: false,
        path: false,
        equals: !!(options === null || options === void 0 ? void 0 : options.object),
        numeric: !!(options === null || options === void 0 ? void 0 : options.numeric),
        combiner: function () { return function (type) {
            var initial = type === "and"
                ? typescript_1.default.factory.createTrue()
                : typescript_1.default.factory.createFalse();
            var binder = type === "and"
                ? typescript_1.default.factory.createLogicalAnd
                : typescript_1.default.factory.createLogicalOr;
            return function (_input, binaries) {
                return binaries.length
                    ? binaries
                        .map(function (binary) { return binary.expression; })
                        .reduce(function (x, y) { return binder(x, y); })
                    : initial;
            };
        }; },
        joiner: {
            object: (options === null || options === void 0 ? void 0 : options.object) ||
                (0, check_object_1.check_object)({
                    equals: !!(options === null || options === void 0 ? void 0 : options.object),
                    assert: true,
                    reduce: typescript_1.default.factory.createLogicalAnd,
                    positive: typescript_1.default.factory.createTrue(),
                    superfluous: function () { return typescript_1.default.factory.createFalse(); },
                }),
            array: function (input, arrow) {
                return typescript_1.default.factory.createCallExpression(IdentifierFactory_1.IdentifierFactory.join(input, "every"), undefined, [arrow]);
            },
            failure: function () { return typescript_1.default.factory.createFalse(); },
        },
        success: typescript_1.default.factory.createTrue(),
    }); };
    function generate(project, modulo, equals) {
        if (equals === void 0) { equals = false; }
        var importer = new FunctionImporeter_1.FunctionImporter();
        if (equals === true)
            importer.use("join");
        return CheckerProgrammer_1.CheckerProgrammer.generate(project, __assign(__assign({}, IsProgrammer.CONFIG({
            object: (0, check_object_1.check_object)({
                equals: equals,
                assert: true,
                reduce: typescript_1.default.factory.createLogicalAnd,
                positive: typescript_1.default.factory.createTrue(),
                superfluous: function () { return typescript_1.default.factory.createFalse(); },
            }),
            numeric: !!project.options.numeric,
        })), { trace: equals }), importer, function () { return importer.declare(modulo); });
    }
    IsProgrammer.generate = generate;
    IsProgrammer.generate_functors = function (project, importer) { return CheckerProgrammer_1.CheckerProgrammer.generate_functors(project, IsProgrammer.CONFIG(), importer); };
    IsProgrammer.generate_unioners = function (project, importer) { return CheckerProgrammer_1.CheckerProgrammer.generate_unioners(project, IsProgrammer.CONFIG(), importer); };
    IsProgrammer.decode = function (project, importer) {
        return CheckerProgrammer_1.CheckerProgrammer.decode(project, IsProgrammer.CONFIG(), importer);
    };
    IsProgrammer.decode_object = function () {
        return CheckerProgrammer_1.CheckerProgrammer.decode_object(IsProgrammer.CONFIG());
    };
    function decode_to_json(input) {
        return typescript_1.default.factory.createLogicalAnd(typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createStringLiteral("object"), ValueFactory_1.ValueFactory.TYPEOF(input)), typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createStringLiteral("function"), ValueFactory_1.ValueFactory.TYPEOF(IdentifierFactory_1.IdentifierFactory.join(input, "toJSON"))));
    }
    IsProgrammer.decode_to_json = decode_to_json;
    function decode_functional(input) {
        return typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createStringLiteral("function"), ValueFactory_1.ValueFactory.TYPEOF(input));
    }
    IsProgrammer.decode_functional = decode_functional;
})(IsProgrammer = exports.IsProgrammer || (exports.IsProgrammer = {}));
//# sourceMappingURL=IsProgrammer.js.map