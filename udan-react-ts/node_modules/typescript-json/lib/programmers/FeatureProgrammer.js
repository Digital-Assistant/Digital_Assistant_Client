"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureProgrammer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var IdentifierFactory_1 = require("../factories/IdentifierFactory");
var StatementFactory_1 = require("../factories/StatementFactory");
var ValueFactory_1 = require("../factories/ValueFactory");
var Escaper_1 = require("../utils/Escaper");
var UnionExplorer_1 = require("./helpers/UnionExplorer");
var FeatureProgrammer;
(function (FeatureProgrammer) {
    FeatureProgrammer.generate = function (project, config, importer, addition) {
        return function (type) {
            var _a, _b;
            var _c = __read(config.initializer(project, type), 2), collection = _c[0], meta = _c[1];
            var output = config.decoder(ValueFactory_1.ValueFactory.INPUT(), meta, {
                tracable: config.path || config.trace,
                source: "top",
                from: "top",
                postfix: '""',
            }, []);
            var functors = ((_a = config.generator) === null || _a === void 0 ? void 0 : _a.functors) !== undefined
                ? config.generator.functors(collection)
                : FeatureProgrammer.generate_functors(config, importer)(collection);
            var unioners = ((_b = config.generator) === null || _b === void 0 ? void 0 : _b.unioners) !== undefined
                ? config.generator.unioners(collection)
                : FeatureProgrammer.generate_unioners(config)(collection);
            var added = addition(collection);
            return typescript_1.default.factory.createArrowFunction(undefined, undefined, PARAMETERS(config)(ValueFactory_1.ValueFactory.INPUT()), undefined, undefined, typescript_1.default.factory.createBlock(__spreadArray(__spreadArray(__spreadArray(__spreadArray([], __read((added || [])), false), __read(functors), false), __read(unioners), false), [
                typescript_1.default.factory.createReturnStatement(output),
            ], false), true));
        };
    };
    FeatureProgrammer.generate_functors = function (config, importer) {
        return function (collection) {
            return collection
                .objects()
                .map(function (obj, i) {
                return StatementFactory_1.StatementFactory.constant("".concat(config.functors).concat(i), generate_object(config, importer)(obj));
            });
        };
    };
    FeatureProgrammer.generate_unioners = function (config) { return function (collection) {
        return collection
            .unions()
            .map(function (union, i) {
            return StatementFactory_1.StatementFactory.constant("".concat(config.unioners).concat(i), generate_union(config)(union));
        });
    }; };
    function generate_object(config, importer) {
        importer.use("join");
        return function (obj) {
            var e_1, _a;
            var entries = [];
            try {
                for (var _b = __values(obj.properties), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var prop = _c.value;
                    var key = prop.key.getSoleLiteral();
                    var input = key === null
                        ? typescript_1.default.factory.createIdentifier("value")
                        : Escaper_1.Escaper.variable(key)
                            ? typescript_1.default.factory.createPropertyAccessExpression(ValueFactory_1.ValueFactory.INPUT(), typescript_1.default.factory.createIdentifier(key))
                            : typescript_1.default.factory.createElementAccessExpression(ValueFactory_1.ValueFactory.INPUT(), typescript_1.default.factory.createStringLiteral(key));
                    entries.push({
                        input: input,
                        key: prop.key,
                        meta: prop.value,
                        expression: config.decoder(input, prop.value, {
                            tracable: config.path || config.trace,
                            source: "object",
                            from: "object",
                            postfix: key !== null
                                ? IdentifierFactory_1.IdentifierFactory.postfix(key)
                                : "$join(key)",
                        }, prop.tags),
                    });
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return typescript_1.default.factory.createArrowFunction(undefined, undefined, PARAMETERS(config)(ValueFactory_1.ValueFactory.INPUT()), undefined, undefined, config.objector.joiner(entries, obj));
        };
    }
    function generate_union(config) {
        var explorer = UnionExplorer_1.UnionExplorer.object(config);
        var input = ValueFactory_1.ValueFactory.INPUT();
        return function (meta) {
            return typescript_1.default.factory.createArrowFunction(undefined, undefined, PARAMETERS(config)(ValueFactory_1.ValueFactory.INPUT()), undefined, undefined, explorer(input, meta, {
                tracable: config.path || config.trace,
                source: "object",
                from: "object",
                postfix: "",
            }, []));
        };
    }
    function decode_array(config, importer, combiner) {
        var rand = importer.increment().toString();
        var tail = config.path || config.trace
            ? [IdentifierFactory_1.IdentifierFactory.parameter("index" + rand)]
            : [];
        return function (input, meta, explore, tags) {
            var arrow = typescript_1.default.factory.createArrowFunction(undefined, undefined, __spreadArray([IdentifierFactory_1.IdentifierFactory.parameter("elem")], __read(tail), false), undefined, undefined, config.decoder(ValueFactory_1.ValueFactory.INPUT("elem"), meta, {
                tracable: explore.tracable,
                source: explore.source,
                from: "array",
                postfix: INDEX_SYMBOL(explore.postfix)(rand),
            }, tags));
            return combiner(input, arrow, tags);
        };
    }
    FeatureProgrammer.decode_array = decode_array;
    FeatureProgrammer.decode_object = function (config) {
        return function (input, obj, explore) {
            return typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("".concat(config.functors).concat(obj.index)), undefined, FeatureProgrammer.get_object_arguments(config)(explore)(input));
        };
    };
    FeatureProgrammer.get_object_arguments = function (config) {
        return function (explore) {
            var tail = config.path === false && config.trace === false
                ? []
                : config.path === true && config.trace === true
                    ? [
                        typescript_1.default.factory.createIdentifier(explore.postfix
                            ? "path + ".concat(explore.postfix)
                            : "path"),
                        explore.source === "object"
                            ? typescript_1.default.factory.createIdentifier("".concat(explore.tracable, " && exceptionable"))
                            : explore.tracable
                                ? typescript_1.default.factory.createTrue()
                                : typescript_1.default.factory.createFalse(),
                    ]
                    : config.path === true
                        ? [
                            typescript_1.default.factory.createIdentifier(explore.postfix
                                ? "path + ".concat(explore.postfix)
                                : "path"),
                        ]
                        : [
                            explore.source === "object"
                                ? typescript_1.default.factory.createIdentifier("".concat(explore.tracable, " && exceptionable"))
                                : explore.tracable
                                    ? typescript_1.default.factory.createTrue()
                                    : typescript_1.default.factory.createFalse(),
                        ];
            return function (input) { return __spreadArray([input], __read(tail), false); };
        };
    };
})(FeatureProgrammer = exports.FeatureProgrammer || (exports.FeatureProgrammer = {}));
var INDEX_SYMBOL = function (prev) { return function (rand) {
    var tail = "\"[\" + index".concat(rand, " + \"]\"");
    if (prev === "")
        return tail;
    else if (prev[prev.length - 1] === "\"")
        return prev.substring(0, prev.length - 1) + tail.substring(1);
    return prev + " + ".concat(tail);
}; };
var PARAMETERS = function (props) {
    var tail = [];
    if (props.path)
        tail.push(IdentifierFactory_1.IdentifierFactory.parameter("path"));
    if (props.trace)
        tail.push(IdentifierFactory_1.IdentifierFactory.parameter("exceptionable"));
    return function (input) { return __spreadArray([
        IdentifierFactory_1.IdentifierFactory.parameter(input)
    ], __read(tail), false); };
};
//# sourceMappingURL=FeatureProgrammer.js.map