"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallExpressionTransformer = void 0;
var path_1 = __importDefault(require("path"));
var ApplicationTransformer_1 = require("./features/ApplicationTransformer");
var AssertTransformer_1 = require("./features/AssertTransformer");
var AssertStringifyTransformer_1 = require("./features/AssertStringifyTransformer");
var CreateAssertStringifyTransformer_1 = require("./features/CreateAssertStringifyTransformer");
var CreateAssertTransformer_1 = require("./features/CreateAssertTransformer");
var CreateInstanceTransformer_1 = require("./features/CreateInstanceTransformer");
var CreateIsStringifyTransformer_1 = require("./features/CreateIsStringifyTransformer");
var CreateIsTransformer_1 = require("./features/CreateIsTransformer");
var CreateStringifyTransformer_1 = require("./features/CreateStringifyTransformer");
var CreateValidateTransformer_1 = require("./features/CreateValidateTransformer");
var IsStringifyTransformer_1 = require("./features/IsStringifyTransformer");
var IsTransformer_1 = require("./features/IsTransformer");
var StringifyTransformer_1 = require("./features/StringifyTransformer");
var ValidateTransformer_1 = require("./features/ValidateTransformer");
var CallExpressionTransformer;
(function (CallExpressionTransformer) {
    function transform(project, expression) {
        var _a;
        var declaration = (_a = project.checker.getResolvedSignature(expression)) === null || _a === void 0 ? void 0 : _a.declaration;
        if (!declaration)
            return expression;
        var file = path_1.default.resolve(declaration.getSourceFile().fileName);
        if (file !== LIB_PATH && file !== SRC_PATH)
            return expression;
        var name = project.checker.getTypeAtLocation(declaration).symbol.name;
        var functor = FUNCTORS[name];
        if (functor === undefined)
            return expression;
        return functor()(project, expression.expression, expression);
    }
    CallExpressionTransformer.transform = transform;
})(CallExpressionTransformer = exports.CallExpressionTransformer || (exports.CallExpressionTransformer = {}));
var LIB_PATH = path_1.default.resolve(path_1.default.join(__dirname, "..", "module.d.ts"));
var SRC_PATH = path_1.default.resolve(path_1.default.join(__dirname, "..", "module.ts"));
var FUNCTORS = {
    assertType: function () { return AssertTransformer_1.AssertTransformer.transform(false); },
    is: function () { return IsTransformer_1.IsTransformer.transform(false); },
    validate: function () { return ValidateTransformer_1.ValidateTransformer.transform(false); },
    assertEquals: function () { return AssertTransformer_1.AssertTransformer.transform(true); },
    equals: function () { return IsTransformer_1.IsTransformer.transform(true); },
    validateEquals: function () { return ValidateTransformer_1.ValidateTransformer.transform(true); },
    stringify: function () { return StringifyTransformer_1.StringifyTransformer.transform; },
    assertStringify: function () { return AssertStringifyTransformer_1.AssertStringifyTransformer.transform; },
    isStringify: function () { return IsStringifyTransformer_1.IsStringifyTransformer.transform; },
    application: function () { return ApplicationTransformer_1.ApplicationTransformer.transform; },
    createAssertType: function () { return CreateAssertTransformer_1.CreateAssertTransformer.transform(false); },
    createIs: function () { return CreateIsTransformer_1.CreateIsTransformer.transform(false); },
    createValidate: function () { return CreateValidateTransformer_1.CreateValidateTransformer.transform(false); },
    createAssertEquals: function () { return CreateAssertTransformer_1.CreateAssertTransformer.transform(true); },
    createEquals: function () { return CreateIsTransformer_1.CreateIsTransformer.transform(true); },
    createValidateEquals: function () { return CreateValidateTransformer_1.CreateValidateTransformer.transform(true); },
    createStringify: function () { return CreateStringifyTransformer_1.CreateStringifyTransformer.transform; },
    createAssertStringify: function () { return CreateAssertStringifyTransformer_1.CreateAssertStringifyTransformer.transform; },
    createIsStringify: function () { return CreateIsStringifyTransformer_1.CreateIsStringifyTransformer.transform; },
    createObject: function () { return CreateInstanceTransformer_1.CreateInstanceTransformer.transform; },
};
//# sourceMappingURL=CallExpressionTransformer.js.map