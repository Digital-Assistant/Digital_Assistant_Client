"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationTransformer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var LiteralFactory_1 = require("../../factories/LiteralFactory");
var MetadataCollection_1 = require("../../factories/MetadataCollection");
var MetadataFactory_1 = require("../../factories/MetadataFactory");
var ApplicationProgrammer_1 = require("../../programmers/ApplicationProgrammer");
var ApplicationTransformer;
(function (ApplicationTransformer) {
    function transform(_a, _modulo, expression) {
        var _b;
        var checker = _a.checker;
        if (!((_b = expression.typeArguments) === null || _b === void 0 ? void 0 : _b.length))
            throw new Error("Error on TSON.application(): no generic argument.");
        var top = expression.typeArguments[0];
        if (!typescript_1.default.isTupleTypeNode(top))
            return expression;
        else if (top.elements.some(function (child) { return !typescript_1.default.isTypeNode(child); }))
            return expression;
        var types = top.elements.map(function (child) {
            return checker.getTypeFromTypeNode(child);
        });
        if (types.some(function (t) { return t.isTypeParameter(); }))
            throw new Error("Error on TSON.application(): non-specified generic argument(s).");
        var purpose = get_parameter(checker, "Purpose", expression.typeArguments[1], function (str) { return str === "swagger" || str === "ajv"; }, function () { return "swagger"; });
        var prefix = get_parameter(checker, "Prefix", expression.typeArguments[2], function () { return true; }, function () {
            return purpose === "swagger"
                ? "#/components/schemas"
                : "components#/schemas";
        });
        var collection = new MetadataCollection_1.MetadataCollection({
            replace: MetadataCollection_1.MetadataCollection.replace,
        });
        var metadatas = types.map(function (type) {
            return MetadataFactory_1.MetadataFactory.generate(checker, collection, type, {
                resolve: true,
                constant: true,
            });
        });
        var app = ApplicationProgrammer_1.ApplicationProgrammer.generate(metadatas, {
            purpose: purpose,
            prefix: prefix,
        });
        return LiteralFactory_1.LiteralFactory.generate(app);
    }
    ApplicationTransformer.transform = transform;
    function get_parameter(checker, name, node, predicator, defaulter) {
        if (!node)
            return defaulter();
        var type = checker.getTypeFromTypeNode(node);
        if (!type.isLiteral())
            throw new Error("Error on TSON.application(): generic argument \"".concat(name, "\" must be constant."));
        var value = type.value;
        if (typeof value !== "string" || predicator(value) === false)
            throw new Error("Error on TSON.application(): invalid value on generic argument \"".concat(name, "\"."));
        return value;
    }
})(ApplicationTransformer = exports.ApplicationTransformer || (exports.ApplicationTransformer = {}));
//# sourceMappingURL=ApplicationTransformer.js.map