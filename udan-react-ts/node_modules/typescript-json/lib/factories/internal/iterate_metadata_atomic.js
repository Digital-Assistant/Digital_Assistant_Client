"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.iterate_metadata_atomic = void 0;
var typescript_1 = __importDefault(require("typescript"));
var ArrayUtil_1 = require("../../utils/ArrayUtil");
var iterate_metadata_atomic = function (meta, type) {
    var e_1, _a;
    var filter = function (flag) { return (type.getFlags() & flag) !== 0; };
    var check = function (flag, literal, className) {
        var _a;
        if (filter(flag) ||
            filter(literal) ||
            ((_a = type.symbol) === null || _a === void 0 ? void 0 : _a.escapedName) === className) {
            ArrayUtil_1.ArrayUtil.add(meta.atomics, className.toLowerCase());
            return true;
        }
        return false;
    };
    try {
        for (var ATOMICS_1 = __values(ATOMICS), ATOMICS_1_1 = ATOMICS_1.next(); !ATOMICS_1_1.done; ATOMICS_1_1 = ATOMICS_1.next()) {
            var _b = __read(ATOMICS_1_1.value, 3), flag = _b[0], literal = _b[1], className = _b[2];
            if (check(flag, literal, className) === true) {
                return true;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (ATOMICS_1_1 && !ATOMICS_1_1.done && (_a = ATOMICS_1.return)) _a.call(ATOMICS_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return false;
};
exports.iterate_metadata_atomic = iterate_metadata_atomic;
var ATOMICS = [
    [typescript_1.default.TypeFlags.BooleanLike, typescript_1.default.TypeFlags.BooleanLiteral, "Boolean"],
    [typescript_1.default.TypeFlags.NumberLike, typescript_1.default.TypeFlags.NumberLiteral, "Number"],
    [typescript_1.default.TypeFlags.BigIntLike, typescript_1.default.TypeFlags.BigIntLiteral, "BigInt"],
    [typescript_1.default.TypeFlags.StringLike, typescript_1.default.TypeFlags.StringLiteral, "String"],
];
//# sourceMappingURL=iterate_metadata_atomic.js.map