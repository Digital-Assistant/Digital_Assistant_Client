"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.explore_metadata = void 0;
var Metadata_1 = require("../../metadata/Metadata");
var MetadataObject_1 = require("../../metadata/MetadataObject");
var ArrayUtil_1 = require("../../utils/ArrayUtil");
var iterate_metadata_1 = require("./iterate_metadata");
var explore_metadata = function (checker) {
    return function (options) {
        return function (collection) {
            return function (type, parentResolved) {
                var e_1, _a;
                var meta = Metadata_1.Metadata.initialize();
                if (type !== null)
                    (0, iterate_metadata_1.iterate_metadata)(checker)(options)(collection)(meta, type, parentResolved);
                if (meta.objects.length > 1) {
                    meta.objects.sort(function (x, y) {
                        return MetadataObject_1.MetadataObject.covers(x, y)
                            ? -1
                            : MetadataObject_1.MetadataObject.covers(y, x)
                                ? 1
                                : 0;
                    });
                    if (parentResolved === false)
                        meta.union_index = collection.getUnionIndex(meta);
                }
                if (meta.arrays.length > 1)
                    meta.arrays.sort(function (x, y) {
                        return Metadata_1.Metadata.covers(x, y) ? -1 : Metadata_1.Metadata.covers(y, x) ? 1 : 0;
                    });
                if (meta.tuples.length > 1)
                    meta.tuples.sort(function (x, y) {
                        var xt = Metadata_1.Metadata.initialize();
                        var yt = Metadata_1.Metadata.initialize();
                        xt.tuples.push(x);
                        yt.tuples.push(y);
                        return Metadata_1.Metadata.covers(xt, yt)
                            ? -1
                            : Metadata_1.Metadata.covers(yt, xt)
                                ? 1
                                : 0;
                    });
                var _loop_1 = function (type_1) {
                    var index = meta.constants.findIndex(function (c) { return c.type === type_1; });
                    if (index !== -1)
                        meta.constants.splice(index, 1);
                };
                try {
                    for (var _b = __values(meta.atomics), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var type_1 = _c.value;
                        _loop_1(type_1);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                {
                    var index = meta.constants.findIndex(function (c) { return c.type === "boolean"; });
                    if (index !== -1 && meta.constants[index].values.length === 2) {
                        meta.constants.splice(index, 1);
                        ArrayUtil_1.ArrayUtil.take(meta.atomics, function (type) { return type === "boolean"; }, function () { return "boolean"; });
                    }
                }
                if (meta.templates.length &&
                    meta.atomics.find(function (type) { return type === "string"; }) !== undefined)
                    meta.templates.splice(0, meta.templates.length);
                return meta;
            };
        };
    };
};
exports.explore_metadata = explore_metadata;
//# sourceMappingURL=explore_metadata.js.map