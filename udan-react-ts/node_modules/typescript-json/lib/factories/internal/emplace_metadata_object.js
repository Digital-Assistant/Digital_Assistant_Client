"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.emplace_metadata_object = void 0;
var typescript_1 = __importDefault(require("typescript"));
var MetadataProperty_1 = require("../../metadata/MetadataProperty");
var Writable_1 = require("../../typings/Writable");
var ArrayUtil_1 = require("../../utils/ArrayUtil");
var CommentFactory_1 = require("../CommentFactory");
var MetadataTagFactory_1 = require("../MetadataTagFactory");
var MetadataHelper_1 = require("./MetadataHelper");
var explore_metadata_1 = require("./explore_metadata");
var emplace_metadata_object = function (checker) {
    return function (options) {
        return function (collection) {
            return function (parent, nullable) {
                var e_1, _a, e_2, _b;
                var _c;
                var _d = __read(collection.emplace(checker, parent), 2), obj = _d[0], newbie = _d[1];
                ArrayUtil_1.ArrayUtil.add(obj.nullables, nullable, function (elem) { return elem === nullable; });
                if (newbie === false)
                    return obj;
                var isClass = parent.isClass();
                var pred = isClass
                    ? function (node) {
                        var _a, _b;
                        var kind = (_b = (_a = node
                            .getChildren()[0]) === null || _a === void 0 ? void 0 : _a.getChildren()[0]) === null || _b === void 0 ? void 0 : _b.kind;
                        return (kind !== typescript_1.default.SyntaxKind.PrivateKeyword &&
                            kind !== typescript_1.default.SyntaxKind.ProtectedKeyword &&
                            (typescript_1.default.isParameter(node) || typescript_1.default.isPropertyDeclaration(node)));
                    }
                    : function (node) {
                        return typescript_1.default.isPropertyDeclaration(node) ||
                            typescript_1.default.isPropertyAssignment(node) ||
                            typescript_1.default.isPropertySignature(node) ||
                            typescript_1.default.isTypeLiteralNode(node);
                    };
                var insert = function (key) {
                    return function (value) {
                        return function (identifier) {
                            return function (symbol, filter) {
                                var description = CommentFactory_1.CommentFactory.generate((symbol === null || symbol === void 0 ? void 0 : symbol.getDocumentationComment(checker)) || []) || undefined;
                                var jsDocTags = ((symbol === null || symbol === void 0 ? void 0 : symbol.getJsDocTags()) || []).filter(filter || (function () { return true; }));
                                var property = MetadataProperty_1.MetadataProperty.create({
                                    key: key,
                                    value: value,
                                    description: description,
                                    jsDocTags: jsDocTags,
                                    tags: MetadataTagFactory_1.MetadataTagFactory.generate(function () { return identifier(); }, value, jsDocTags),
                                });
                                obj.properties.push(property);
                                return property;
                            };
                        };
                    };
                };
                var _loop_1 = function (prop) {
                    if ((prop.getJsDocTags(checker) || []).find(function (tag) { return tag.name === "internal"; }) !== undefined)
                        return "continue";
                    var _j = __read((function () {
                        var node = (prop.getDeclarations() || [])[0];
                        var type = node
                            ? checker.getTypeOfSymbolAtLocation(prop, node)
                            : "getTypeOfPropertyOfType" in checker
                                ? checker.getTypeOfPropertyOfType(parent, prop.name)
                                : undefined;
                        return [node, type];
                    })(), 2), node = _j[0], type = _j[1];
                    if ((node && pred(node) === false) || type === undefined)
                        return "continue";
                    var key = MetadataHelper_1.MetadataHelper.literal_to_metadata(prop.name);
                    var value = (0, explore_metadata_1.explore_metadata)(checker)(options)(collection)(type, false);
                    if (node === null || node === void 0 ? void 0 : node.questionToken)
                        (0, Writable_1.Writable)(value).required = false;
                    insert(key)(value)(function () { return "".concat(obj.name, ".").concat(prop.name); })(prop);
                };
                try {
                    for (var _e = __values(parent.getApparentProperties()), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var prop = _f.value;
                        _loop_1(prop);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                var _loop_2 = function (index) {
                    var analyzer = function (type) {
                        return (0, explore_metadata_1.explore_metadata)(checker)(options)(collection)(type, false);
                    };
                    var key = analyzer(index.keyType);
                    var value = analyzer(index.type);
                    insert(key)(value)(function () { return "".concat(obj.name, "[").concat(key.getName(), "]"); })(((_c = index.declaration) === null || _c === void 0 ? void 0 : _c.parent)
                        ? checker.getSymbolAtLocation(index.declaration.parent)
                        : undefined, function (doc) { return doc.name !== "default"; });
                };
                try {
                    for (var _g = __values(checker.getIndexInfosOfType(parent)), _h = _g.next(); !_h.done; _h = _g.next()) {
                        var index = _h.value;
                        _loop_2(index);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                return obj;
            };
        };
    };
};
exports.emplace_metadata_object = emplace_metadata_object;
//# sourceMappingURL=emplace_metadata_object.js.map