"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.iterate_metadata = void 0;
var iterate_metadata_array_1 = require("./iterate_metadata_array");
var iterate_metadata_atomic_1 = require("./iterate_metadata_atomic");
var iterate_metadata_coalesce_1 = require("./iterate_metadata_coalesce");
var iterate_metadata_constant_1 = require("./iterate_metadata_constant");
var iterate_metadata_object_1 = require("./iterate_metadata_object");
var iterate_metadata_resolve_1 = require("./iterate_metadata_resolve");
var iterate_metadata_template_1 = require("./iterate_metadata_template");
var iterate_metadata_tuple_1 = require("./iterate_metadata_tuple");
var iterate_metadata_union_1 = require("./iterate_metadata_union");
var iterate_metadata = function (checker) {
    return function (options) {
        return function (collection) {
            return function (meta, type, parentResolved) {
                if (type.isTypeParameter() === true)
                    throw new Error("Error on TSON.MetadataFactory.generate(): non-specified generic argument on ".concat(meta.getName(), "."));
                if ((0, iterate_metadata_union_1.iterate_metadata_union)(checker)(options)(collection)(meta, type, parentResolved) ||
                    (0, iterate_metadata_resolve_1.iterate_metadata_resolve)(checker)(options)(collection)(meta, type, parentResolved))
                    return;
                var node = checker.typeToTypeNode(type, undefined, undefined);
                if (node === undefined)
                    return;
                (0, iterate_metadata_coalesce_1.iterate_metadata_coalesce)(meta, type) ||
                    (0, iterate_metadata_constant_1.iterate_metadata_constant)(checker)(options)(meta, type) ||
                    (0, iterate_metadata_template_1.iterate_metadata_template)(checker)(options)(collection)(meta, type) ||
                    (0, iterate_metadata_atomic_1.iterate_metadata_atomic)(meta, type) ||
                    (0, iterate_metadata_tuple_1.iterate_metadata_tuple)(checker)(options)(collection)(meta, type) ||
                    (0, iterate_metadata_array_1.iterate_metadata_array)(checker)(options)(collection)(meta, type) ||
                    (0, iterate_metadata_object_1.iterate_metadata_object)(checker)(options)(collection)(meta, type, parentResolved);
            };
        };
    };
};
exports.iterate_metadata = iterate_metadata;
//# sourceMappingURL=iterate_metadata.js.map