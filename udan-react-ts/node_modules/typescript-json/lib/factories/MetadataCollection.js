"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataCollection = void 0;
var MetadataObject_1 = require("../metadata/MetadataObject");
var MapUtil_1 = require("../utils/MapUtil");
var CommentFactory_1 = require("./CommentFactory");
var TypeFactory_1 = require("./TypeFactory");
var MetadataCollection = (function () {
    function MetadataCollection(options) {
        this.options = options;
        this.dict_ = new Map();
        this.names_ = new Map();
        this.unions_ = new Map();
        this.index_ = 0;
    }
    MetadataCollection.prototype.objects = function () {
        return __spreadArray([], __read(this.dict_.values()), false);
    };
    MetadataCollection.prototype.unions = function () {
        return __spreadArray([], __read(this.unions_.values()), false);
    };
    MetadataCollection.prototype.emplace = function (checker, type) {
        var _a;
        var oldbie = this.dict_.get(type);
        if (oldbie !== undefined)
            return [oldbie, false];
        var $id = this.get_name(checker, type);
        var obj = MetadataObject_1.MetadataObject.create({
            name: $id,
            properties: [],
            description: (type.symbol &&
                CommentFactory_1.CommentFactory.generate(type.symbol.getDocumentationComment(checker))) ||
                undefined,
            jsDocTags: ((_a = type.symbol) === null || _a === void 0 ? void 0 : _a.getJsDocTags()) || [],
            validated: false,
            index: this.index_++,
            recursive: false,
            nullables: [],
        });
        this.dict_.set(type, obj);
        return [obj, true];
    };
    MetadataCollection.prototype.getUnionIndex = function (meta) {
        var key = meta.objects.map(function (obj) { return obj.name; }).join(" | ");
        MapUtil_1.MapUtil.take(this.unions_, key, function () { return meta.objects; });
        return this.unions_.size - 1;
    };
    MetadataCollection.prototype.get_name = function (checker, type) {
        var _this = this;
        var name = (function () {
            var _a;
            var str = TypeFactory_1.TypeFactory.getFullName(checker, type);
            return ((_a = _this.options) === null || _a === void 0 ? void 0 : _a.replace) ? _this.options.replace(str) : str;
        })();
        var duplicates = MapUtil_1.MapUtil.take(this.names_, name, function () { return new Map(); });
        var oldbie = duplicates.get(type);
        if (oldbie !== undefined)
            return oldbie;
        var addicted = duplicates.size
            ? "".concat(name, ".o").concat(duplicates.size)
            : name;
        duplicates.set(type, addicted);
        return addicted;
    };
    return MetadataCollection;
}());
exports.MetadataCollection = MetadataCollection;
(function (MetadataCollection) {
    function replace(str) {
        var e_1, _a;
        try {
            for (var REPLACERS_1 = __values(REPLACERS), REPLACERS_1_1 = REPLACERS_1.next(); !REPLACERS_1_1.done; REPLACERS_1_1 = REPLACERS_1.next()) {
                var _b = __read(REPLACERS_1_1.value, 2), before = _b[0], after = _b[1];
                str = str.split(before).join(after);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (REPLACERS_1_1 && !REPLACERS_1_1.done && (_a = REPLACERS_1.return)) _a.call(REPLACERS_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return str;
    }
    MetadataCollection.replace = replace;
})(MetadataCollection = exports.MetadataCollection || (exports.MetadataCollection = {}));
exports.MetadataCollection = MetadataCollection;
var REPLACERS = [
    ["$", "_dollar_"],
    ["&", "_and_"],
    ["|", "_or_"],
    ["{", "_blt_"],
    ["}", "_bgt_"],
    ["<", "_lt_"],
    [">", "_gt_"],
    ["[", "_alt_"],
    ["]", "_agt_"],
    [",", "_comma_"],
    ["`", ""],
    ["'", ""],
    ['"', ""],
    [" ", ""],
];
//# sourceMappingURL=MetadataCollection.js.map