"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createIsStringify = exports.createAssertStringify = exports.createStringify = exports.createObject = exports.createValidateEquals = exports.createEquals = exports.createAssertEquals = exports.createValidate = exports.createIs = exports.createAssertType = exports.isStringify = exports.assertStringify = exports.stringify = exports.application = exports.validateEquals = exports.equals = exports.assertEquals = exports.validate = exports.is = exports.assertType = void 0;
var _every_1 = require("./functional/$every");
var _guard_1 = require("./functional/$guard");
var _is_email_1 = require("./functional/$is_email");
var _is_ipv4_1 = require("./functional/$is_ipv4");
var _is_ipv6_1 = require("./functional/$is_ipv6");
var _is_url_1 = require("./functional/$is_url");
var _is_uuid_1 = require("./functional/$is_uuid");
var _join_1 = require("./functional/$join");
var _number_1 = require("./functional/$number");
var _report_1 = require("./functional/$report");
var _string_1 = require("./functional/$string");
var _tail_1 = require("./functional/$tail");
var TypeGuardError_1 = require("./TypeGuardError");
__exportStar(require("./schemas/IJsonApplication"), exports);
__exportStar(require("./schemas/IJsonComponents"), exports);
__exportStar(require("./schemas/IJsonSchema"), exports);
__exportStar(require("./TypeGuardError"), exports);
__exportStar(require("./IValidation"), exports);
function assertType() {
    halt("assertType");
}
exports.assertType = assertType;
(function (assertType) {
    assertType.is_uuid = _is_uuid_1.$is_uuid;
    assertType.is_email = _is_email_1.$is_email;
    assertType.is_url = _is_url_1.$is_url;
    assertType.is_ipv4 = _is_ipv4_1.$is_ipv4;
    assertType.is_ipv6 = _is_ipv6_1.$is_ipv6;
    assertType.join = _join_1.$join;
    assertType.every = _every_1.$every;
    assertType.guard = (0, _guard_1.$guard)("TSON.assertType");
})(assertType = exports.assertType || (exports.assertType = {}));
function is() {
    halt("is");
}
exports.is = is;
(function (is) {
    is.is_uuid = _is_uuid_1.$is_uuid;
    is.is_email = _is_email_1.$is_email;
    is.is_url = _is_url_1.$is_url;
    is.is_ipv4 = _is_ipv4_1.$is_ipv4;
    is.is_ipv6 = _is_ipv6_1.$is_ipv6;
})(is = exports.is || (exports.is = {}));
function validate() {
    halt("validate");
}
exports.validate = validate;
(function (validate) {
    validate.is_uuid = _is_uuid_1.$is_uuid;
    validate.is_email = _is_email_1.$is_email;
    validate.is_url = _is_url_1.$is_url;
    validate.is_ipv4 = _is_ipv4_1.$is_ipv4;
    validate.is_ipv6 = _is_ipv6_1.$is_ipv6;
    validate.join = _join_1.$join;
    validate.report = _report_1.$report;
})(validate = exports.validate || (exports.validate = {}));
function assertEquals() {
    halt("assertEquals");
}
exports.assertEquals = assertEquals;
(function (assertEquals) {
    assertEquals.is_uuid = _is_uuid_1.$is_uuid;
    assertEquals.is_email = _is_email_1.$is_email;
    assertEquals.is_url = _is_url_1.$is_url;
    assertEquals.is_ipv4 = _is_ipv4_1.$is_ipv4;
    assertEquals.is_ipv6 = _is_ipv6_1.$is_ipv6;
    assertEquals.join = _join_1.$join;
    assertEquals.every = _every_1.$every;
    assertEquals.guard = (0, _guard_1.$guard)("TSON.assertEquals");
})(assertEquals = exports.assertEquals || (exports.assertEquals = {}));
function equals() {
    halt("equals");
}
exports.equals = equals;
(function (equals) {
    equals.is_uuid = _is_uuid_1.$is_uuid;
    equals.is_email = _is_email_1.$is_email;
    equals.is_url = _is_url_1.$is_url;
    equals.is_ipv4 = _is_ipv4_1.$is_ipv4;
    equals.is_ipv6 = _is_ipv6_1.$is_ipv6;
    equals.join = _join_1.$join;
})(equals = exports.equals || (exports.equals = {}));
function validateEquals() {
    halt("validateEquals");
}
exports.validateEquals = validateEquals;
(function (validateEquals) {
    validateEquals.is_uuid = _is_uuid_1.$is_uuid;
    validateEquals.is_email = _is_email_1.$is_email;
    validateEquals.is_url = _is_url_1.$is_url;
    validateEquals.is_ipv4 = _is_ipv4_1.$is_ipv4;
    validateEquals.is_ipv6 = _is_ipv6_1.$is_ipv6;
    validateEquals.join = _join_1.$join;
    validateEquals.report = validate.report;
})(validateEquals = exports.validateEquals || (exports.validateEquals = {}));
function application() {
    halt("application");
}
exports.application = application;
function stringify() {
    halt("stringify");
}
exports.stringify = stringify;
(function (stringify) {
    stringify.number = _number_1.$number;
    stringify.string = _string_1.$string;
    stringify.tail = _tail_1.$tail;
    function throws(props) {
        throw new TypeGuardError_1.TypeGuardError(__assign(__assign({}, props), { method: "TSON.stringify" }));
    }
    stringify.throws = throws;
})(stringify = exports.stringify || (exports.stringify = {}));
function assertStringify() {
    halt("assertStringify");
}
exports.assertStringify = assertStringify;
(function (assertStringify) {
    assertStringify.is_uuid = _is_uuid_1.$is_uuid;
    assertStringify.is_email = _is_email_1.$is_email;
    assertStringify.is_url = _is_url_1.$is_url;
    assertStringify.is_ipv4 = _is_ipv4_1.$is_ipv4;
    assertStringify.is_ipv6 = _is_ipv6_1.$is_ipv6;
    assertStringify.number = _number_1.$number;
    assertStringify.string = _string_1.$string;
    assertStringify.tail = _tail_1.$tail;
    assertStringify.join = _join_1.$join;
    assertStringify.guard = (0, _guard_1.$guard)("TSON.assertStringify");
    assertStringify.every = _every_1.$every;
    assertStringify.throws = function () { };
})(assertStringify = exports.assertStringify || (exports.assertStringify = {}));
function isStringify() {
    halt("isStringify");
}
exports.isStringify = isStringify;
(function (isStringify) {
    isStringify.is_uuid = _is_uuid_1.$is_uuid;
    isStringify.is_email = _is_email_1.$is_email;
    isStringify.is_url = _is_url_1.$is_url;
    isStringify.is_ipv4 = _is_ipv4_1.$is_ipv4;
    isStringify.is_ipv6 = _is_ipv6_1.$is_ipv6;
    isStringify.number = _number_1.$number;
    isStringify.string = _string_1.$string;
    isStringify.tail = _tail_1.$tail;
    function throws(props) {
        throw new TypeGuardError_1.TypeGuardError(__assign(__assign({}, props), { method: "TSON.assertStringify" }));
    }
    isStringify.throws = throws;
})(isStringify = exports.isStringify || (exports.isStringify = {}));
function createAssertType() {
    halt("createAssertType");
}
exports.createAssertType = createAssertType;
(function (createAssertType) {
    createAssertType.is_uuid = _is_uuid_1.$is_uuid;
    createAssertType.is_email = _is_email_1.$is_email;
    createAssertType.is_url = _is_url_1.$is_url;
    createAssertType.is_ipv4 = _is_ipv4_1.$is_ipv4;
    createAssertType.is_ipv6 = _is_ipv6_1.$is_ipv6;
    createAssertType.join = _join_1.$join;
    createAssertType.every = _every_1.$every;
    createAssertType.guard = assertType.guard;
})(createAssertType = exports.createAssertType || (exports.createAssertType = {}));
function createIs() {
    halt("createIs");
}
exports.createIs = createIs;
(function (createIs) {
    createIs.is_uuid = _is_uuid_1.$is_uuid;
    createIs.is_email = _is_email_1.$is_email;
    createIs.is_url = _is_url_1.$is_url;
    createIs.is_ipv4 = _is_ipv4_1.$is_ipv4;
    createIs.is_ipv6 = _is_ipv6_1.$is_ipv6;
})(createIs = exports.createIs || (exports.createIs = {}));
function createValidate() {
    halt("createValidate");
}
exports.createValidate = createValidate;
(function (createValidate) {
    createValidate.is_uuid = _is_uuid_1.$is_uuid;
    createValidate.is_email = _is_email_1.$is_email;
    createValidate.is_url = _is_url_1.$is_url;
    createValidate.is_ipv4 = _is_ipv4_1.$is_ipv4;
    createValidate.is_ipv6 = _is_ipv6_1.$is_ipv6;
    createValidate.join = _join_1.$join;
    createValidate.report = validate.report;
})(createValidate = exports.createValidate || (exports.createValidate = {}));
function createAssertEquals() {
    halt("createAssertEquals");
}
exports.createAssertEquals = createAssertEquals;
(function (createAssertEquals) {
    createAssertEquals.is_uuid = _is_uuid_1.$is_uuid;
    createAssertEquals.is_email = _is_email_1.$is_email;
    createAssertEquals.is_url = _is_url_1.$is_url;
    createAssertEquals.is_ipv4 = _is_ipv4_1.$is_ipv4;
    createAssertEquals.is_ipv6 = _is_ipv6_1.$is_ipv6;
    createAssertEquals.join = _join_1.$join;
    createAssertEquals.every = assertEquals.every;
    createAssertEquals.guard = assertEquals.guard;
})(createAssertEquals = exports.createAssertEquals || (exports.createAssertEquals = {}));
function createEquals() {
    halt("createEquals");
}
exports.createEquals = createEquals;
(function (createEquals) {
    createEquals.is_uuid = _is_uuid_1.$is_uuid;
    createEquals.is_email = _is_email_1.$is_email;
    createEquals.is_url = _is_url_1.$is_url;
    createEquals.is_ipv4 = _is_ipv4_1.$is_ipv4;
    createEquals.is_ipv6 = _is_ipv6_1.$is_ipv6;
    createEquals.join = _join_1.$join;
})(createEquals = exports.createEquals || (exports.createEquals = {}));
function createValidateEquals() {
    halt("createValidateEquals");
}
exports.createValidateEquals = createValidateEquals;
(function (createValidateEquals) {
    createValidateEquals.is_uuid = _is_uuid_1.$is_uuid;
    createValidateEquals.is_email = _is_email_1.$is_email;
    createValidateEquals.is_url = _is_url_1.$is_url;
    createValidateEquals.is_ipv4 = _is_ipv4_1.$is_ipv4;
    createValidateEquals.is_ipv6 = _is_ipv6_1.$is_ipv6;
    createValidateEquals.join = _join_1.$join;
    createValidateEquals.report = validateEquals.report;
})(createValidateEquals = exports.createValidateEquals || (exports.createValidateEquals = {}));
function createObject() {
    halt("createObject");
}
exports.createObject = createObject;
function createStringify() {
    halt("createStringify");
}
exports.createStringify = createStringify;
(function (createStringify) {
    createStringify.number = _number_1.$number;
    createStringify.string = _string_1.$string;
    createStringify.tail = _tail_1.$tail;
    createStringify.throws = stringify.throws;
})(createStringify = exports.createStringify || (exports.createStringify = {}));
function createAssertStringify() {
    halt("createAssertStringify");
}
exports.createAssertStringify = createAssertStringify;
(function (createAssertStringify) {
    createAssertStringify.is_uuid = _is_uuid_1.$is_uuid;
    createAssertStringify.is_email = _is_email_1.$is_email;
    createAssertStringify.is_url = _is_url_1.$is_url;
    createAssertStringify.is_ipv4 = _is_ipv4_1.$is_ipv4;
    createAssertStringify.is_ipv6 = _is_ipv6_1.$is_ipv6;
    createAssertStringify.number = _number_1.$number;
    createAssertStringify.string = _string_1.$string;
    createAssertStringify.tail = _tail_1.$tail;
    createAssertStringify.join = _join_1.$join;
    createAssertStringify.every = assertStringify.every;
    createAssertStringify.guard = assertStringify.guard;
    createAssertStringify.throws = assertStringify.throws;
})(createAssertStringify = exports.createAssertStringify || (exports.createAssertStringify = {}));
function createIsStringify() {
    halt("createIsStringify");
}
exports.createIsStringify = createIsStringify;
(function (createIsStringify) {
    createIsStringify.is_uuid = _is_uuid_1.$is_uuid;
    createIsStringify.is_email = _is_email_1.$is_email;
    createIsStringify.is_url = _is_url_1.$is_url;
    createIsStringify.is_ipv4 = _is_ipv4_1.$is_ipv4;
    createIsStringify.is_ipv6 = _is_ipv6_1.$is_ipv6;
    createIsStringify.number = _number_1.$number;
    createIsStringify.string = _string_1.$string;
    createIsStringify.tail = _tail_1.$tail;
    createIsStringify.throws = isStringify.throws;
})(createIsStringify = exports.createIsStringify || (exports.createIsStringify = {}));
function halt(name) {
    throw new Error("Error on TSON.".concat(name, "(): no transform has been configured. Configure the \"tsconfig.json\" file following the [README.md#setup](https://github.com/samchon/typescript-json#setup)"));
}
//# sourceMappingURL=module.js.map